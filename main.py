#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import os
import sys
import time
import psutil
import importlib
import importlib.util
import shutil
import logging
import aiohttp
import json
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.types import Message

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("newera.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê ====================
class NewEraV4Fix:
    def __init__(self):
        self.start_time = time.time()
        self.modules_dir = "modules"
        self.loaded_modules = {}
        self.module_commands = {}
        self.config = {}
        self.client = None
        self.session = aiohttp.ClientSession()
        
        # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        self.styled_chars = {
            'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á',
            'f': '“ì', 'g': '…¢', 'h': ' ú', 'i': '…™', 'j': '·¥ä',
            'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è',
            'p': '·¥ò', 'q': '«´', 'r': ' Ä', 's': 'Íú±', 't': '·¥õ',
            'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x', 'y': ' è',
            'z': '·¥¢', '0': 'ùü¢', '1': 'ùü£', '2': 'ùü§', '3': 'ùü•',
            '4': 'ùü¶', '5': 'ùüß', '6': 'ùü®', '7': 'ùü©', '8': 'ùü™',
            '9': 'ùü´'
        }
        
        # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
        self.languages = {
            "ru": {
                "uptime": "–ê–ø—Ç–∞–π–º",
                "user": "–Æ–∑–µ—Ä", 
                "cpu": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä",
                "ram": "–û–ø–µ—Ä–∞—Ç–∏–≤–∫–∞",
                "host": "–•–æ—Å—Ç",
                "commands": "–ö–æ–º–∞–Ω–¥—ã",
                "help_text": """**NewEraV4Fix - –∫–æ–º–∞–Ω–¥—ã:**

`.help` - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
`.info` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
`.ping` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏–Ω–≥
`.lm` - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å (—Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–∞–π–ª)
`.ulm <–∏–º—è>` - –í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å
`.modules` - –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
`.logs` - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
`.setlang <ru/en>` - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
`.restart` - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
`.stop` - –û—Å—Ç–∞–Ω–æ–≤–∫–∞
`.backup` - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
`.clean` - –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã""",
                "module_loaded": "‚úÖ –ú–æ–¥—É–ª—å {} –∑–∞–≥—Ä—É–∂–µ–Ω",
                "module_unloaded": "‚úÖ –ú–æ–¥—É–ª—å {} –≤—ã–≥—Ä—É–∂–µ–Ω",
                "module_not_found": "‚ùå –ú–æ–¥—É–ª—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "lang_changed": "üåç –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {}",
                "restarting": "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...",
                "stopping": "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...",
                "no_modules": "üì¶ –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π",
                "modules_list": "üìö **–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:**",
                "backup_created": "üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {}",
                "temp_cleaned": "üßπ –û—á–∏—â–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {}",
                "logs_empty": "ü™µ –õ–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                "logs_title": "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:",
                "logs_error": "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {}",
                "ping_result": "‚ö°Ô∏è–ü–∏–Ω–≥: {}–º—Å\nüåø –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω",
                "ipinfo_result": """üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {}:
üåç –°—Ç—Ä–∞–Ω–∞: {}
üèô –ì–æ—Ä–æ–¥: {}
üì± –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {}
üì° –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {}
üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {}, {}
‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {}""",
                "ipinfo_error": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ IP: {}",
                "file_not_found": "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "not_reply": "‚ùå –≠—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "not_py_file": "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .py"
            },
            "en": {
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            }
        }

    # ==================== –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–û–î–´ ====================
    def print_banner(self):
        banner = r"""
  _   _               _____           
 | \ | | _____      _| ____|_ __ __ _ 
 |  \| |/ _ \ \ /\ / /  _| | '__/ _` |
 | |\  |  __/\ V  V /| |___| | | (_| |
 |_| \_|\___| \_/\_/ |_____|_|  \__,_|

Build: #Fix7HxBy9x
Update: Not Updates
GoodLuck ‚ô°
"""
        print(banner)

    def load_config(self):
        try:
            self.print_banner()
            print(" –£–¥–∞—á–∏ ".center(40, '‚Äî'))
            
            self.config = {
                "api_id": int(input("API ID: ").strip()),
                "api_hash": input("API Hash: ").strip(),
                "prefix": input("–ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥ [.]: ").strip() or ".",
                "language": (input("–Ø–∑—ã–∫ [ru/en]: ").strip() or "ru").lower(),
                "owner_id": input("ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip() or None
            }
            
            print("=" * 40)
            return True
        except Exception as e:
            logger.critical(f"Config error: {e}")
            return False

    def get_text(self, key):
        return self.languages[self.config.get("language", "ru")].get(key, key)

    def get_uptime(self):
        uptime = int(time.time() - self.start_time)
        return f"{uptime // 3600:02d}:{(uptime % 3600) // 60:02d}:{uptime % 60:02d}"

    def get_system_info(self):
        try:
            memory = psutil.virtual_memory()
            return {
                "uptime": self.get_uptime(),
                "ram": f"{memory.percent:.1f}%"
            }
        except:
            return {
                "uptime": self.get_uptime(),
                "ram": "N/A"
            }

    def style_text(self, text):
        return ''.join([self.styled_chars.get(c.lower(), c) for c in text])

    # ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================
    async def setup_handlers(self):
        prefix = self.config["prefix"]
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}help$"))
        async def help_handler(event):
            await event.edit(self.get_text("help_text"))
            
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}info$"))
        async def info_handler(event):
            info = self.get_system_info()
            me = await self.client.get_me()
            username = me.username or me.first_name
            
            text = f"""`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ     NewEraV4Fix     
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ {self.style_text('uptime')}: {info["uptime"]}      
‚îÇ {self.style_text('user')}: {username}       
‚îÇ {self.style_text('ram')}: {info["ram"]}           
‚îÇ {self.style_text('host')}: Termux         
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
`"""
            await event.edit(text)
        
        # Ping/IPinfo
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}ping$"))
        async def ping_handler(event):
            start = time.time()
            msg = await event.edit("‚ö°Ô∏è–ü–∏–Ω–≥...")
            latency = round((time.time() - start) * 1000, 2)
            await msg.edit(self.get_text("ping_result").format(latency))
        
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}ipinfo (.+)$"))
        async def ipinfo_handler(event):
            ip = event.pattern_match.group(1)
            try:
                async with self.session.get(f"http://ip-api.com/json/{ip}") as resp:
                    data = await resp.json()
                    if data["status"] == "success":
                        result = self.get_text("ipinfo_result").format(
                            ip, data.get("country", "N/A"), data.get("city", "N/A"),
                            data.get("isp", "N/A"), data.get("org", "N/A"),
                            data.get("lat", ""), data.get("lon", ""),
                            data.get("timezone", "N/A")
                        )
                        await event.edit(result)
                    else:
                        await event.edit(self.get_text("ipinfo_error").format(data.get("message", "Unknown")))
            except Exception as e:
                await event.edit(self.get_text("ipinfo_error").format(str(e)))
                logger.error(f"IPInfo error: {e}", exc_info=True)
        
        # –õ–æ–≥–∏
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}logs$"))
        async def logs_handler(event):
            try:
                if not os.path.exists("newera.log"):
                    await event.edit(self.get_text("logs_empty"))
                    return
                
                with open("newera.log", "r", encoding="utf-8") as f:
                    logs = f.readlines()[-20:]
                    await event.edit(f"{self.get_text('logs_title')}\n\n```{''.join(logs)}```")
            except Exception as e:
                await event.edit(self.get_text("logs_error").format(str(e)))
                logger.error(f"Logs error: {e}", exc_info=True)
        
        # –ú–æ–¥—É–ª–∏
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}lm$"))
        async def load_module_handler(event):
            if not event.is_reply:
                return await event.edit(self.get_text("not_reply"))
                
            reply = await event.get_reply_message()
            if not reply.document:
                return await event.edit(self.get_text("file_not_found"))
                
            file_name = reply.document.attributes[0].file_name
            if not file_name.endswith('.py'):
                return await event.edit(self.get_text("not_py_file"))
                
            module_name = file_name[:-3]
            await event.edit(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è {module_name}...")
            
            file_path = await reply.download_media()
            success = await self.load_module(file_path, module_name)
            
            text = self.get_text("module_loaded").format(module_name) if success else f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {module_name}"
            await event.edit(text)
            
            if os.path.exists(file_path):
                os.remove(file_path)
        
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}ulm (.+)$"))
        async def unload_module_handler(event):
            module_name = event.pattern_match.group(1)
            success = await self.unload_module(module_name)
            
            if success:
                await event.edit(self.get_text("module_unloaded").format(module_name))
            else:
                await event.edit(self.get_text("module_not_found").format(module_name))
        
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}modules$"))
        async def modules_handler(event):
            if not self.loaded_modules:
                return await event.edit(self.get_text("no_modules"))
                
            text = self.get_text("modules_list") + "\n"
            for name, module in self.loaded_modules.items():
                text += f"‚Ä¢ `{name}`\n"
                if name in self.module_commands:
                    text += "  ‚îî " + ", ".join(f"`{prefix}{cmd}`" for cmd in self.module_commands[name]) + "\n"
            await event.edit(text)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}setlang (ru|en)$"))
        async def setlang_handler(event):
            lang = event.pattern_match.group(1)
            self.config["language"] = lang
            await event.edit(self.get_text("lang_changed").format(lang.upper()))
        
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}restart$"))
        async def restart_handler(event):
            await event.edit(self.get_text("restarting"))
            await self.client.disconnect()
            os.execl(sys.executable, sys.executable, *sys.argv)
        
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}stop$"))
        async def stop_handler(event):
            await event.edit(self.get_text("stopping"))
            await self.client.disconnect()
            sys.exit(0)
        
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}backup$"))
        async def backup_handler(event):
            backup_dir = "backups"
            os.makedirs(backup_dir, exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"backup_{timestamp}.zip"
            
            try:
                shutil.make_archive(
                    os.path.join(backup_dir, f"backup_{timestamp}"),
                    'zip',
                    '.',
                    ['modules', 'main.py', 'newera.log']
                )
                await event.edit(self.get_text("backup_created").format(backup_name))
            except Exception as e:
                await event.edit(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}")
                logger.error(f"Backup error: {e}", exc_info=True)
        
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}clean$"))
        async def clean_handler(event):
            try:
                temp_dir = "/tmp"
                count = 0
                if os.path.exists(temp_dir):
                    for filename in os.listdir(temp_dir):
                        file_path = os.path.join(temp_dir, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.unlink(file_path)
                                count += 1
                        except Exception:
                            continue
                await event.edit(self.get_text("temp_cleaned").format(count))
            except Exception as e:
                await event.edit(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")
                logger.error(f"Clean error: {e}", exc_info=True)

    # ==================== –ú–ï–¢–û–î–´ –ú–û–î–£–õ–ï–ô ====================
    async def load_module(self, file_path, module_name):
        try:
            os.makedirs(self.modules_dir, exist_ok=True)
            module_path = os.path.join(self.modules_dir, f"{module_name}.py")
            
            with open(file_path, "rb") as src, open(module_path, "wb") as dst:
                dst.write(src.read())
            
            spec = importlib.util.spec_from_file_location(module_name, module_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            if hasattr(module, "register"):
                handlers = await module.register(self.client)
                if hasattr(module, "commands"):
                    self.module_commands[module_name] = module.commands
                self.loaded_modules[module_name] = module
                logger.info(f"Module {module_name} loaded")
                return True
            return False
        except Exception as e:
            logger.error(f"Load module error: {e}", exc_info=True)
            return False

    async def unload_module(self, module_name):
        if module_name in self.loaded_modules:
            module = self.loaded_modules[module_name]
            if hasattr(module, "unregister"):
                await module.unregister(self.client)
            
            if module_name in self.module_commands:
                del self.module_commands[module_name]
            
            del self.loaded_modules[module_name]
            
            module_path = os.path.join(self.modules_dir, f"{module_name}.py")
            if os.path.exists(module_path):
                os.remove(module_path)
            
            logger.info(f"Module {module_name} unloaded")
            return True
        return False

    # ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
    async def start(self):
        if not self.load_config():
            logger.critical("Failed to load config")
            return
            
        self.client = TelegramClient(
            "newera_session",
            self.config["api_id"],
            self.config["api_hash"]
        )
        
        try:
            await self.client.start()
            await self.setup_handlers()
            
            me = await self.client.get_me()
            logger.info(f"Bot started as @{me.username}")
            print(f"\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @{me.username}")
            print(f"–ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥: {self.config['prefix']}")
            print(f"–Ø–∑—ã–∫: {self.config['language']}")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n")
            
            await self.client.run_until_disconnected()
        except Exception as e:
            logger.critical(f"Start error: {e}", exc_info=True)
        finally:
            await self.session.close()

# ==================== –¢–û–ß–ö–ê –í–•–û–î–ê ====================
if __name__ == "__main__":
    bot = NewEraV4Fix()
    try:
        asyncio.run(bot.start())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        sys.exit(0)
    except Exception as e:
        logger.critical(f"Fatal error: {e}", exc_info=True)
        sys.exit(1)
